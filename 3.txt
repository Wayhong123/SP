	void Assign_Address( string type ) { // 算出每個指令的地址
		for ( int x = 0 ; x < source.size() ; x++ ) {
			int tokennum = 1;
			bool literal = false;
			for ( int j = 0 ; j < token_record.size() && 
			      !table.Compare_Instr(token_record[j].str,"END") ; j++ ) {
				if ( x == token_record[j].line && source[x].str.size() != 0 ) {
					if ( token_record[j].str == "." && tokennum == 1 && token_record[j].numOftable == 4 ) {
						break;
					}
					
					else if ( table.Compare_Instr(token_record[j].str,"LTORG") ) {
						break;
					}
					
					else if ( source[x].address == "-1" ) {
						string adr = convert.itos(pc);
						source[x].address = Add0(4,adr);
					}
					
					if ( token_record[j].numOftable == 5 && tokennum == 1 ) {
						string adr = convert.itos(pc);
						if ( !table.Exist_In_sym_table(token_record[j].str) ) {
							  table.Set_sym_table(token_record[j].valueOftable,
							                      adr,
												  token_record[j].str);
						}
						
						else {
							cout << "<-Error Message-> Line: " + convert.itos(x+1) + "Duplicated Symbol"; 
						}
					}
					
					else if ( token_record[j].numOftable == 4 && token_record[j].str == "=" ) {
						literal = true;
					}
					
					else if ( literal ) {
						table.push_in_literal_table(token_record[j].str);
					}
					
					else if ( table.Compare_Instr(token_record[j].str,"START") ) {
						if ( token_record[j+1].numOftable == 6 &&
						     token_record[j+1].line == x ) {
							int num = convert.Convert_Dec(token_record[j+1].str);
							pc = pc + num;
							for ( int i = x ; i < source.size() ; i++ ) {
								if ( i <= token_record[j].line ) {
									int newadr = atoi(source[i].address.c_str());
									newadr = newadr + pc;
									source[i].address = convert.itos(newadr);
								}
								
								else {
									break;
								}
							}
							
							table.Relocation(pc);
							j++; 
						}
						
						else {
							cout << "<-Error Message-> Line: " + convert.itos(x+1) + " Sytax Error!!!\n";
						}
						
					}
					
					else if ( table.Compare_Instr(token_record[j].str,"WORD") ||
							  table.Compare_Instr(token_record[j].str,"EQU" ) ||
					          token_record[j].numOftable == 1 ) {
					    if ( token_record[j].numOftable == 1 && type == "SICXE" ) {
					    	if ( token_record[j-1].line == x && token_record[j-1].str == "+" && token_record[j-1].numOftable == 4 ) 
					    		pc = pc + 4;
					    	else if ( token_record[j-1].line == x && token_record[j-1].str != "+" 
							          && token_record[j-1].numOftable == 4 ) {
					    		cout << "<-Error Message-> Line: " + convert.itos(x+1) + " Sytax Error!!!\n";
					    	}
					    	else {
					    		pc = pc + Instr_Length(token_record[j].str);
					    	}
						}
						else {
							pc = pc + 3;
						}
					}
					
					else if ( table.Compare_Instr(token_record[j].str,"RESW") ) {
						if ( token_record[j+1].numOftable == 6 && 
						     token_record[j+1].line == x ) {
							int num = atoi(token_record[j+1].str.c_str());
							num = num * 3;
							pc = pc + num;
							j++;
						}
						
						else {
							cout << "<-Error Message-> Line: " + convert.itos(x+1) + " Sytax Error!!!\n";
						}
					}
					
					else if ( table.Compare_Instr(token_record[j].str,"RESB") ) {
						if ( token_record[j+1].numOftable == 6 &&
						     token_record[j+1].line == x ) {
							int num = atoi(token_record[j+1].str.c_str());
							pc = pc + num;
							j++;
						}
						
					}
					
					else if ( table.Compare_Instr(token_record[j].str,"BYTE") ) {
						if ( token_record[j+2].numOftable == 7 &&
						     token_record[j+2].line == x ) {
							int length = token_record[j+2].str.size();
							pc = pc + length;
							j = j + 2;
						}
						
						else if ( token_record[j+2].numOftable == 6 &&
						          token_record[j+2].line == x ) {
							int length = token_record[j+2].str.size() / 2;
							pc = pc + length;
							j = j + 2;
						}
						
						else {
							cout << "<-Error Message-> Line: " + convert.itos(x+1) + " Sytax Error!!!\n";
						}

					}
					
					if ( table.Compare_Instr(token_record[j].str,"WORD") || 
						 table.Compare_Instr(token_record[j].str,"RESB") || 
						 table.Compare_Instr(token_record[j].str,"RESW") ) {
						if ( !table.is_number(token_record[j+1].str) ) {
							cout << "<-Error Message-> Line: " + convert.itos(x+1) + " Sytax Error!!!\n";
						}
					}
					tokennum++;
					
				}
				
				else if ( x < token_record[j].line ) {
					break;
				}
				
				else if ( source[x].str.size() == 0 ) {
					break;
				}
				
				else if ( table.Compare_Instr(token_record[j+1].str,"END") ) {
					table.Set_literal_table(pc+3);
				}
				
				else if ( table.Compare_Instr(token_record[j].str,"LTORG") ) {
					table.Set_literal_table(pc+3);   	
				}
			}
		}
		 
	}
	
	void Generate_Machine_Code( string type ) {
		for ( int line = 0 ; line < source.size() ; line++ ) {
			int tokennum = 1;
			string numOftable = "-1";
			string adr_s,opcode,r1,r2,n = "0",i = "0",x = "0",b = "0",p = "0",e = "0";
			bool byte = false, operand = false, literal = false;
			for ( int j = 0 ; j < token_record.size() ; j++ ) {
				if ( line == token_record[j].line ) {
					if ( table.Compare_Instr(token_record[j].str,"START") || 
					     table.Compare_Instr(token_record[j].str,"RESW") || 
						 table.Compare_Instr(token_record[j].str,"RESB") ||
						 table.Compare_Instr(token_record[j].str,"END") ||
						 table.Compare_Instr(token_record[j].str,"EQU") || 
						 table.Compare_Instr(token_record[j].str,"LTORG")) {
						break;
					}
					
					else if ( tokennum == 1 && token_record[j].str == "." ) {
						break;
					}
					else if ( token_record[j].numOftable == 5 && tokennum == 1 ) {
						;	
					}
					
					else if ( token_record[j].numOftable == 4 && token_record[j].str == "=" &&
					          opcode.size() != 0 ) {
						literal = true;	
					}
					
					else if ( literal && token_record[j].numOftable != 4 ) {
						adr_s = table.Get_literal_address(token_record[j].str);
					}
					
					else if ( table.Compare_Instr(token_record[j].str,"BASE") && 
					          token_record[j].numOftable == 2 ) {
						b = "1";
						x = "1";
					}
					
					else if ( token_record[j].numOftable == 4 && token_record[j].str == "#" ) {
						i = "1";
						n = "0";
					}
					
					else if ( token_record[j].numOftable == 4 && token_record[j].str == "@" ) {
						n = "1";
						i = "0";
					}
					
					else if ( token_record[j].str == "+" && token_record[j].numOftable == 4 && 
					          type == "SICXE" ) {
						e = "1";	
					}
					
					else if ( ( r1.size() != 0 || operand ) && token_record[j].str == "," && 
					          token_record[j].numOftable == 4 ) {
						;
					}
					
					else if ( token_record[j].numOftable == 3 ) {
						string temp = table.Get_register(token_record[j].str);
						if ( type == "SIC" )
							x = "1";
						else {
							if ( r1.size() == 0 ) {
								r1 = temp;
							}
							
							else if ( r2.size() == 0 ) {
								r2 = temp;
							}
						}
					}
					
					else if ( token_record[j].numOftable == 4 && byte ) {
						;
					}
					
					else if ( token_record[j].numOftable == 5 && tokennum != 1 && !operand ) {
						operand = true;
						adr_s = table.Get_Address(token_record[j].str);
						if ( adr_s == "NO" ) {
							cout << "<-Error Message-> Line: " + convert.itos(line+1) + " Undefined Symbol!!!\n";
						}
					}
					
					else if ( token_record[j].numOftable == 1 ) {
						if ( opcode.size() == 0 && type == "SIC" )
							opcode = table.Get_opcode(token_record[j].str);
						else if ( opcode.size() == 0 && type == "SICXE" )
							opcode = token_record[j].str;
						else
							cout << "<-Error Message-> Line: " + convert.itos(line+1) + " Sytax Error!!!\n";
					}
					
					else if ( table.Compare_Instr(token_record[j].str,"WORD") ) {
						opcode = "00";
					}
					
					else if ( table.Compare_Instr(token_record[j].str,"BYTE") ) {
						byte = true;
					}
					
					else if ( token_record[j].numOftable == 6 && byte && !operand) {
						operand = true;
						source[line].machine_code = token_record[j].str;
					}
					
					else if ( token_record[j].numOftable == 6 && opcode == "00" && !operand) {
						operand = true;
						source[line].machine_code = opcode + 
						                         Add0(4,convert.Hex_format(16,token_record[j].str));	
					}
					
					else if ( token_record[j].numOftable == 7 && byte && !operand ) {
						operand = true;
						string temp;
						for ( int g = 0 ; g < token_record[j].str.size() ; g++ ) {
							char ch = token_record[j].str[g];
							string ch2 = convert.itos_format(16,ch);
							temp = temp + ch2;
						}
						source[line].machine_code = temp;
					}
					
					else if ( token_record[j].numOftable == 6 && !operand ) {
						operand = true;
						adr_s = token_record[j].str;
						numOftable = "6";
					}

					else {
						cout << "<-Error Message-> Line: " + convert.itos(line+1) + " Sytax Error!!!\n";
					}
					
					tokennum++;
					if ( source[line].machine_code == "-1" && line != token_record[j+1].line && type == "SIC") { 
						if ( x != "0" && opcode.size() != 0 ) {
							adr_s = convert.itos(atoi( convert.Hex_format(16,adr_s).c_str()) + 8000);
							source[line].machine_code = opcode + adr_s;
						}
						
						else if ( x == "0" && opcode.size() != 0  ) {
							source[line].machine_code = opcode + Add0(4,convert.Hex_format(16,adr_s));
						}
						
						else {
							cout << "<-Error Message-> Line: " + convert.itos(line+1) + " Sytax Error!!!\n";
						}
					}
					
					else if ( source[line].machine_code == "-1" && line != token_record[j+1].line && type == "SICXE" ) {
						if ( r1.size() == 0 && r2.size() != 0 ) {
							Add0(4,r2);
						}
						
						else if (r1.size() != 0 && r2.size() == 0) {
							r1 = r1 + "0";
						}
						
						if ( opcode.size() != 0 ) {
							string reg = r1+r2;
							string other = n+i+x+b+p+e;
							source[line].machine_code = SICXE_Machine_Code( opcode, reg, other, adr_s, line+1, numOftable );
						}
						
						else {
							cout << "<-Error Message-> Line: " + convert.itos(line+1) + " Sytax Error!!!\n";
						}
					}
				}
				
				else if ( line < token_record[j].line ) {
					break;
				}

				else if ( source[line].str.size() == 0 ) {
					break;
				}
			}
		}
	}